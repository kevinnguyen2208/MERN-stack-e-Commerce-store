{"ast":null,"code":"import axios from 'axios';\nimport { PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL } from \"../constants/productConstants\";\n\nconst listProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products\");\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products/\" + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!product._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', product, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + product._id, product, {\n        headers: {\n          'Authorization': 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct, saveProduct };","map":{"version":3,"sources":["/Users/kevinnguyen/Desktop/assignment3/frontend/src/actions/productActions.js"],"names":["axios","PRODUCT_LIST_FAIL","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_SAVE_REQUEST","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","listProducts","dispatch","type","data","get","payload","error","message","detailsProduct","productId","saveProduct","product","getState","userSignin","userInfo","_id","Axios","post","headers","token","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { PRODUCT_LIST_FAIL, PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS,PRODUCT_DETAILS_REQUEST,PRODUCT_DETAILS_SUCCESS,PRODUCT_DETAILS_FAIL, PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL } from \"../constants/productConstants\";\n\nconst listProducts = () => async(dispatch) => {\n    try{ \n    dispatch({type:PRODUCT_LIST_REQUEST});\n    const {data}=await axios.get(\"/api/products\");\n    dispatch({type: PRODUCT_LIST_SUCCESS, payload:data});\n    }catch(error){\n        dispatch({type:PRODUCT_LIST_FAIL,payload:error.message});\n    }\n}\n\nconst detailsProduct = (productId) => async(dispatch) =>{\n    try {\n        dispatch({type:PRODUCT_DETAILS_REQUEST,payload:productId});\n        const {data} = await axios.get(\"/api/products/\" + productId);\n        dispatch({type:PRODUCT_DETAILS_SUCCESS,payload:data});\n    }catch(error){\n        dispatch({type:PRODUCT_DETAILS_FAIL,payload:error.message});\n    }\n}\nconst saveProduct = (product) => async (dispatch, getState) => {\n    try {\n      dispatch({ type: PRODUCT_SAVE_REQUEST, payload: product });\n      const { userSignin: { userInfo } } = getState();\n      if (!product._id) {\n        const { data } = await Axios.post('/api/products', product, {\n          headers: {\n            'Authorization': 'Bearer ' + userInfo.token\n          }\n        });\n        dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\n      } else {\n        const { data } = await Axios.put('/api/products/' + product._id, product, {\n          headers: {\n            'Authorization': 'Bearer ' + userInfo.token\n          }\n        });\n        dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\n      }\n \n    } catch (error) {\n \n      dispatch({ type: PRODUCT_SAVE_FAIL, payload: error.message });\n    }\n  }\n \n  \nexport {listProducts,detailsProduct,saveProduct}"]},"metadata":{},"sourceType":"module"}